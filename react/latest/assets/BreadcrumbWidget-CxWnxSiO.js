import{b as t}from"./iframe-CTDlrwV_.js";import{O as x,u as E,bb as O,m as b,E as C,r as L}from"./widgetDescriptions-BWQxYL9a.js";import{B as h}from"./BreadcrumbPresentation-DYwfFh6X.js";import{E as f}from"./badge-BlGAMJ8n.js";function N(n){var m,u;const{api:a,ontologyId:o,iri:s,entityType:d,colorFirst:i,colorSecond:r,parameter:c,useLegacy:l,onNavigateToOntology:y,className:g}=n,I=new x(a),{data:e,isLoading:T,isSuccess:k,isError:w,error:S}=E(["breadcrumb",a,c,d,s,o,l],async()=>await I.getEntityObject(s,d,o,c,l));return t.jsxs("div",{"data-testid":"breadcrumb",children:[T&&t.jsxs("span",{children:[t.jsx("span",{onClick:()=>{n.onNavigateToOntology&&n.onNavigateToOntology(n.ontologyId||"",void 0,void 0)},role:"button",tabIndex:0,onKeyDown:p=>{p.key==="Enter"&&p.currentTarget.click()},children:t.jsx(f,{className:n.ontologyId?"breadcrumb clickable-breadcrumb":"breadcrumb",color:i||(n.ontologyId?"primary":"warning"),children:((m=n.ontologyId)==null?void 0:m.toUpperCase())||t.jsx(b,{size:"s"})})})," ",t.jsx(C,{type:"arrowRight"})," ",t.jsx(f,{className:"breadcrumb",color:r||"warning",children:t.jsx(b,{size:"s"})})]}),k&&e&&O(e)&&t.jsx(h,{ontologyName:e.getOntologyId(),shortForm:e.getShortForm(),ontologyId:o||e.getOntologyId(),colorFirst:i,colorSecond:r,onNavigateToOntology:y,className:g}),w&&t.jsx(h,{ontologyName:((u=n.ontologyId)==null?void 0:u.toUpperCase())||e&&e.getOntologyId().toUpperCase()||L(S,"ontology"),shortForm:e&&e.getShortForm()?e.getShortForm().toUpperCase():"",ontologyId:o||(e?e.getOntologyId():""),colorFirst:i||(n.ontologyId||e&&e.getOntologyId()?"primary":"danger"),colorSecond:r||(e&&e.getShortForm()?"success":"danger"),onNavigateToOntology:y,className:g})]})}N.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call."},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:""},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},colorFirst:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},colorSecond:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},onNavigateToOntology:{required:!1,tsType:{name:"union",raw:`((
  ontologyId: string,
  entityType?: string,
  entity?: EntityData,
) => void) | string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the clicked badge
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"}}};export{N as B};
