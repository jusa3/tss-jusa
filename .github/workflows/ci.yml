name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency: # jobs run in sequence
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # don't cancel the previous job

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
    outputs:
      srversion: ${{ steps.setoutput.outputs.srversion }}
      srrelease: ${{ steps.setoutput.outputs.srrelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Make sure semantic-release uses its own credentials

      - name: Set up Node.js (GitHub registry)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@sasse'

      - name: Install root dependencies
        run: npm ci

      - name: Install and build React package
        working-directory: packages/react
        run: |
          npm ci
          npm run build

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'
          scope: '@sasse'

      - name: Run semantic release for React package and capture output
        id: semantic_release
        run: |
          output=$(npx semantic-release)
          sanitized_output=$(echo "$output" | tr '\n' ' ')
          echo "release_output=$sanitized_output" >> $GITHUB_OUTPUT
          echo "$output"
        env:
          GITHUB_TOKEN: ${{ secrets.KM }} # for access to the repo
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTO }} # for access to NPM
        working-directory: packages/react

      - name: Parse semantic-release output
        run: |
          echo "SRVERSION=$(echo "${{ steps.semantic_release.outputs.release_output }}" | grep -oP 'Published release \K\d+\.\d+\.\d+')" >> $GITHUB_ENV
          if echo "${{ steps.semantic_release.outputs.release_output }}" | grep -q 'Published release'; then
            echo "SRRELEASE=release" >> $GITHUB_ENV
          fi

      - name: Save outputs
        run: |
          echo "srversion=$SRVERSION" >> "$GITHUB_OUTPUT"
          echo "srrelease=$SRRELEASE" >> "$GITHUB_OUTPUT"

      - name: Print version info
        run: |
          echo "SRVERSION is $SRVERSION"
          echo "SRRELEASE is $SRRELEASE"

      - name: Install and build JS package
        working-directory: packages/js
        run: |
          npm ci
          npm run build
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Change version
        uses: reedyuk/npm-version@1.1.1
        with:
          version: "$SRVERSION"
          package: packages/js

      - name: Publish JS package
        run: |
          npm publish
        working-directory: packages/js
        env:
          token: ${{ secrets.NPM_AUTO }}

#  documentation:
#    if: github.ref == 'refs/heads/main' && needs.build.outputs.srrelease == 'release'
#    needs: build
#    runs-on: ubuntu-latest
#    permissions:
#      pages: write      # to deploy to Pages
#      id-token: write   # to verify the deployment originates from an appropriate source
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up Node.js (GitHub registry)
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node-version }}
#          registry-url: 'https://npm.pkg.github.com/'
#          scope: '@sasse'
#
#      - name: Install dependencies # for Storybook
#        run: npm ci
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.KM }} # KM PAT for esbuild-dynamic-import and gh-pages-multi
#
#      - name: Build plain JavaScript widgets # for Storybook
#        run: npm run build:plainJS
#
#      - name: Install and Build HTML Storybook
#        run: |
#          npm install
#          npm run build-storybook-html -- -o html
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.KM }}
#
#      - name: Upload html artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          name: html-widgets
#          path: 'html'
#
#      - name: Install and Build React Storybook
#        run: |
#          npm install
#          npm run build-storybook-react -- -o react
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.KM }}
#
#      - name: Upload react artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          name: react-widgets
#          path: 'react'
#
#      - name: Install and Build Composed Storybook
#        run: |
#          npm install
#          npm run build-storybook -- -o public
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.KM }}
#
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: 'public'
#
#      - name: Set Git Author Identity
#        run: |
#          git config --global user.name "GitHub Actions"
#          git config --global user.email "actions@github.com"
#
#      - name: Configure Git to Use PAT for Authentication
#        run: |
#          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n '${{ secrets.GH_PAT }}' | base64)"
#
#      - name: Use SRVERSION
#        env:
#          SRVERSION: ${{ needs.build.outputs.srversion }}
#        run: echo "SRVERSION is $SRVERSION"
#
#      - name: Deploy as Latest to GitHub Pages
#        if: env.SRVERSION != ''
#        env:
#          SRVERSION: ${{ needs.build.outputs.srversion }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          npx gh-pages-multi deploy -s react --no-history -t react/latest
#          npx gh-pages-multi deploy -s html --no-history -t html/latest
#          npx gh-pages-multi deploy -s public --no-history -t comp/latest
#
#      - name: Deploy Version to GitHub Pages
#        if: env.SRVERSION != ''
#        env:
#          SRVERSION: ${{ needs.build.outputs.srversion }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          npx gh-pages-multi deploy -s react --no-history -t react/"$SRVERSION"
#          npx gh-pages-multi deploy -s html --no-history -t html/"$SRVERSION"
#          npx gh-pages-multi deploy -s public --no-history -t comp/"$SRVERSION"